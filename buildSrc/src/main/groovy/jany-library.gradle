plugins {
    id 'java-library'
    id 'jacoco'
    id "com.github.ben-manes.versions"
}
sourceCompatibility = '1.8'
java {
    registerFeature('optional') {
        usingSourceSet(sourceSets.main)
    }
    withSourcesJar()
}

dependencies {
    api platform(project(':jany-platform'))
    annotationProcessor platform(project(':jany-platform'))
    testAnnotationProcessor platform(project(':jany-platform'))
    api platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    testAnnotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")

    compileOnly 'org.jetbrains:annotations'
    compileOnly 'org.projectlombok:lombok'
    compileOnly 'com.google.code.findbugs:jsr305'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testCompileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.jetbrains:annotations'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.skyscreamer:jsonassert'
}

test {
    useJUnitPlatform()
    failFast = false
    jvmArgs += ["-Dorg.jooq.no-logo=true"]
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().remove(asNode().dependencyManagement)
                asNode().dependencies.'*'.findAll() {
                    it.optional.text() == 'true'
                }.each() {
                    it.parent().remove(it)
                }
            }
        }
    }
}